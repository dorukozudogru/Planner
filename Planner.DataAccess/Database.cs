// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DBContext`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `data source=DORUKOZUDOGRU;initial catalog=ProjeSepeti;persist security info=True;user id=sa;password=**zapped**;App=EntityFramework`
//     Schema:                 ``
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Planner.DataAccess
{
	public partial class DBContextDB : Database
	{
		public DBContextDB() 
			: base("DBContext")
		{
			CommonConstruct();
		}

		public DBContextDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			DBContextDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static DBContextDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new DBContextDB();
        }

		[ThreadStatic] static DBContextDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static DBContextDB repo { get { return DBContextDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}

    #region Tables
    [TableName("dbo.Project")]
    [PrimaryKey("Id", autoIncrement = false)]
    [ExplicitColumns]
    public partial class Project : DBContextDB.Record<Project>
    {
        [Column] public string Id { get; set; }
        [Column] public string Name { get; set; }
        [Column] public string Description { get; set; }
        [Column] public string FileName { get; set; }
        [Column] public string FilePath { get; set; }
        [Column] public long FileSize { get; set; }
        [Column] public string FileExtension { get; set; }
        [Column] public int? IsApproved { get; set; }
        [Column] public int? IsApproveChanged { get; set; }
        [Column] public int? IsSupported { get; set; }
        [Column] public string SupportRequest { get; set; }
        [Column] public DateTime CreationDate { get; set; }
        [Column] public string CreatedBy { get; set; }
        [Column] public DateTime? LastEditDate { get; set; }
        [Column] public string LastEditBy { get; set; }
    }

    [TableName("dbo.ProjectUserAuthorize")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class ProjectUserAuthorize : DBContextDB.Record<ProjectUserAuthorize>
    {
        [Column] public int Id { get; set; }
        [Column] public string ProjectId { get; set; }
        [Column] public string AuthorizedUserId { get; set; }
        [Column] public DateTime? LastEditDate { get; set; }
        [Column] public string LastEditBy { get; set; }
    }

    [TableName("dbo.RejectedProjects")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class RejectedProject : DBContextDB.Record<RejectedProject>
    {
        [Column] public int Id { get; set; }
        [Column] public string RejectedProjectId { get; set; }
        [Column] public string RejectUserId { get; set; }
        [Column] public string RejectCause { get; set; }
        [Column] public DateTime RejectDate { get; set; }
    }

    [TableName("dbo.Role")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class Role : DBContextDB.Record<Role>
    {
        [Column] public int Id { get; set; }
        [Column] public string RoleName { get; set; }
        [Column] public string RoleDefinition { get; set; }
        [Column] public string RoleFunctions { get; set; }
    }

    [TableName("dbo.SupportedProjects")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class SupportedProject : DBContextDB.Record<SupportedProject>
    {
        [Column] public int Id { get; set; }
        [Column] public string SupportedProjectId { get; set; }
        [Column] public string SupporterUserId { get; set; }
        [Column] public string SupportRequirements { get; set; }
        [Column] public string SupportValue { get; set; }
        [Column] public DateTime? SupportDate { get; set; }
    }

    [TableName("dbo.UserCV")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class UserCV : DBContextDB.Record<UserCV>
    {
        [Column] public int Id { get; set; }
        [Column] public string UserId { get; set; }
        [Column] public string FileName { get; set; }
        [Column] public string FilePath { get; set; }
        [Column] public DateTime CreationDate { get; set; }
    }

    [TableName("dbo.UserProject")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class UserProject : DBContextDB.Record<UserProject>
    {
        [Column] public int Id { get; set; }
        [Column] public string UserId { get; set; }
        [Column] public string ProjectId { get; set; }
        [Column] public int? IsApproved { get; set; }
        [Column] public int? IsApproveChanged { get; set; }
        [Column] public int? IsSupported { get; set; }
        [Column] public string SupportRequest { get; set; }
    }

    [TableName("dbo.UserRole")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class UserRole : DBContextDB.Record<UserRole>
    {
        [Column] public int Id { get; set; }
        [Column] public string UserId { get; set; }
        [Column] public int RoleId { get; set; }
    }

    [TableName("dbo.Users")]
    [PrimaryKey("Id", autoIncrement = false)]
    [ExplicitColumns]
    public partial class Users : DBContextDB.Record<Users>
    {
        [Column] public string Id { get; set; }
        [Column] public string EMail { get; set; }
        [Column] public string Name { get; set; }
        [Column] public string Surname { get; set; }
        [Column] public string Password { get; set; }
        [Column] public DateTime BirthDate { get; set; }
        [Column] public string PhoneNumber { get; set; }
        [Column] public string CitizenshipNo { get; set; }
        [Column] public string City { get; set; }
        [Column] public string School { get; set; }
        [Column] public string Department { get; set; }
        [Column] public string Job { get; set; }
        [Column] public bool? IsFirm { get; set; }
        [Column] public bool IsCvUploaded { get; set; }
        [Column] public bool? IsEmailVerified { get; set; }
        [Column] public int IsApproved { get; set; }
        [Column] public bool? IsAdmin { get; set; }
        [Column] public bool? IsActive { get; set; }
        [Column] public DateTime RegisterDate { get; set; }
        [Column] public DateTime? LastEditDate { get; set; }
        [Column] public string LastEditBy { get; set; }
        [Column] public string Code { get; set; }
    }
    #endregion

    #region Views
    [TableName("dbo.vwUsersCVs")]
    [ExplicitColumns]
    public partial class vwUsersCV : DBContextDB.Record<vwUsersCV>
    {
        [Column] public string UserId { get; set; }
        [Column] public string EMail { get; set; }
        [Column] public string Name { get; set; }
        [Column] public string Surname { get; set; }
        [Column] public string CitizenshipNo { get; set; }
        [Column] public int UserCVId { get; set; }
        [Column] public string FileName { get; set; }
        [Column] public string FilePath { get; set; }
    }

    [TableName("dbo.vwUsersProjects")]
    [ExplicitColumns]
    public partial class vwUsersProject : DBContextDB.Record<vwUsersProject>
    {
        [Column] public string Id { get; set; }
        [Column] public string Name { get; set; }
        [Column] public string Surname { get; set; }
        [Column] public string EMail { get; set; }
        [Column] public string CitizenshipNo { get; set; }
        [Column] public string ProjectId { get; set; }
        [Column] public string ProjectName { get; set; }
        [Column] public string Description { get; set; }
        [Column] public string FileName { get; set; }
        [Column] public DateTime CreationDate { get; set; }
        [Column] public int? IsApproved { get; set; }
        [Column] public int? IsSupported { get; set; }
        [Column] public string SupportRequest { get; set; }
        [Column] public string SupporterUserId { get; set; }
        [Column] public string SupportRequirements { get; set; }
        [Column] public string SupportValue { get; set; }
        [Column] public DateTime? SupportDate { get; set; }
    }

    [TableName("dbo.vwAuthorizedUserProject")]
    [ExplicitColumns]
    public partial class vwAuthorizedUserProject : DBContextDB.Record<vwAuthorizedUserProject>
    {
        [Column] public string ProjectId { get; set; }
        [Column] public string UserId { get; set; }
        [Column] public string UserName { get; set; }
        [Column] public string UserSurname { get; set; }
        [Column] public string UserEMail { get; set; }
        [Column] public string UserIsAdmin { get; set; }
    }

    [TableName("dbo.vwRejectedProjects")]
    [ExplicitColumns]
    public partial class vwRejectedProjects : DBContextDB.Record<vwRejectedProjects>
    {
        [Column] public string ProjectId { get; set; }
        [Column] public string ProjectName { get; set; }
        [Column] public string ProjectDescription { get; set; }
        [Column] public string RejectCause { get; set; }
        [Column] public DateTime RejectDate { get; set; }
    }
    #endregion
}